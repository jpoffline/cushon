// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cushon/ent/deposit"
	"cushon/ent/fund"
	"cushon/ent/predicate"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FundUpdate is the builder for updating Fund entities.
type FundUpdate struct {
	config
	hooks    []Hook
	mutation *FundMutation
}

// Where appends a list predicates to the FundUpdate builder.
func (fu *FundUpdate) Where(ps ...predicate.Fund) *FundUpdate {
	fu.mutation.Where(ps...)
	return fu
}

// SetName sets the "Name" field.
func (fu *FundUpdate) SetName(s string) *FundUpdate {
	fu.mutation.SetName(s)
	return fu
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (fu *FundUpdate) SetNillableName(s *string) *FundUpdate {
	if s != nil {
		fu.SetName(*s)
	}
	return fu
}

// AddDepositIDs adds the "deposits" edge to the Deposit entity by IDs.
func (fu *FundUpdate) AddDepositIDs(ids ...uuid.UUID) *FundUpdate {
	fu.mutation.AddDepositIDs(ids...)
	return fu
}

// AddDeposits adds the "deposits" edges to the Deposit entity.
func (fu *FundUpdate) AddDeposits(d ...*Deposit) *FundUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fu.AddDepositIDs(ids...)
}

// Mutation returns the FundMutation object of the builder.
func (fu *FundUpdate) Mutation() *FundMutation {
	return fu.mutation
}

// ClearDeposits clears all "deposits" edges to the Deposit entity.
func (fu *FundUpdate) ClearDeposits() *FundUpdate {
	fu.mutation.ClearDeposits()
	return fu
}

// RemoveDepositIDs removes the "deposits" edge to Deposit entities by IDs.
func (fu *FundUpdate) RemoveDepositIDs(ids ...uuid.UUID) *FundUpdate {
	fu.mutation.RemoveDepositIDs(ids...)
	return fu
}

// RemoveDeposits removes "deposits" edges to Deposit entities.
func (fu *FundUpdate) RemoveDeposits(d ...*Deposit) *FundUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fu.RemoveDepositIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fu *FundUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fu.sqlSave, fu.mutation, fu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fu *FundUpdate) SaveX(ctx context.Context) int {
	affected, err := fu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fu *FundUpdate) Exec(ctx context.Context) error {
	_, err := fu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fu *FundUpdate) ExecX(ctx context.Context) {
	if err := fu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fu *FundUpdate) check() error {
	if v, ok := fu.mutation.Name(); ok {
		if err := fund.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Fund.Name": %w`, err)}
		}
	}
	return nil
}

func (fu *FundUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := fu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(fund.Table, fund.Columns, sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID))
	if ps := fu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fu.mutation.Name(); ok {
		_spec.SetField(fund.FieldName, field.TypeString, value)
	}
	if fu.mutation.DepositsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fund.DepositsTable,
			Columns: fund.DepositsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.RemovedDepositsIDs(); len(nodes) > 0 && !fu.mutation.DepositsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fund.DepositsTable,
			Columns: fund.DepositsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fu.mutation.DepositsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fund.DepositsTable,
			Columns: fund.DepositsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, fu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fu.mutation.done = true
	return n, nil
}

// FundUpdateOne is the builder for updating a single Fund entity.
type FundUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FundMutation
}

// SetName sets the "Name" field.
func (fuo *FundUpdateOne) SetName(s string) *FundUpdateOne {
	fuo.mutation.SetName(s)
	return fuo
}

// SetNillableName sets the "Name" field if the given value is not nil.
func (fuo *FundUpdateOne) SetNillableName(s *string) *FundUpdateOne {
	if s != nil {
		fuo.SetName(*s)
	}
	return fuo
}

// AddDepositIDs adds the "deposits" edge to the Deposit entity by IDs.
func (fuo *FundUpdateOne) AddDepositIDs(ids ...uuid.UUID) *FundUpdateOne {
	fuo.mutation.AddDepositIDs(ids...)
	return fuo
}

// AddDeposits adds the "deposits" edges to the Deposit entity.
func (fuo *FundUpdateOne) AddDeposits(d ...*Deposit) *FundUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fuo.AddDepositIDs(ids...)
}

// Mutation returns the FundMutation object of the builder.
func (fuo *FundUpdateOne) Mutation() *FundMutation {
	return fuo.mutation
}

// ClearDeposits clears all "deposits" edges to the Deposit entity.
func (fuo *FundUpdateOne) ClearDeposits() *FundUpdateOne {
	fuo.mutation.ClearDeposits()
	return fuo
}

// RemoveDepositIDs removes the "deposits" edge to Deposit entities by IDs.
func (fuo *FundUpdateOne) RemoveDepositIDs(ids ...uuid.UUID) *FundUpdateOne {
	fuo.mutation.RemoveDepositIDs(ids...)
	return fuo
}

// RemoveDeposits removes "deposits" edges to Deposit entities.
func (fuo *FundUpdateOne) RemoveDeposits(d ...*Deposit) *FundUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fuo.RemoveDepositIDs(ids...)
}

// Where appends a list predicates to the FundUpdate builder.
func (fuo *FundUpdateOne) Where(ps ...predicate.Fund) *FundUpdateOne {
	fuo.mutation.Where(ps...)
	return fuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fuo *FundUpdateOne) Select(field string, fields ...string) *FundUpdateOne {
	fuo.fields = append([]string{field}, fields...)
	return fuo
}

// Save executes the query and returns the updated Fund entity.
func (fuo *FundUpdateOne) Save(ctx context.Context) (*Fund, error) {
	return withHooks(ctx, fuo.sqlSave, fuo.mutation, fuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fuo *FundUpdateOne) SaveX(ctx context.Context) *Fund {
	node, err := fuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fuo *FundUpdateOne) Exec(ctx context.Context) error {
	_, err := fuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fuo *FundUpdateOne) ExecX(ctx context.Context) {
	if err := fuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fuo *FundUpdateOne) check() error {
	if v, ok := fuo.mutation.Name(); ok {
		if err := fund.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Fund.Name": %w`, err)}
		}
	}
	return nil
}

func (fuo *FundUpdateOne) sqlSave(ctx context.Context) (_node *Fund, err error) {
	if err := fuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(fund.Table, fund.Columns, sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID))
	id, ok := fuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Fund.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, fund.FieldID)
		for _, f := range fields {
			if !fund.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != fund.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := fuo.mutation.Name(); ok {
		_spec.SetField(fund.FieldName, field.TypeString, value)
	}
	if fuo.mutation.DepositsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fund.DepositsTable,
			Columns: fund.DepositsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.RemovedDepositsIDs(); len(nodes) > 0 && !fuo.mutation.DepositsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fund.DepositsTable,
			Columns: fund.DepositsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := fuo.mutation.DepositsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fund.DepositsTable,
			Columns: fund.DepositsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Fund{config: fuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{fund.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fuo.mutation.done = true
	return _node, nil
}
