// Code generated by ent, DO NOT EDIT.

package fund

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the fund type in the database.
	Label = "fund"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// EdgeDeposits holds the string denoting the deposits edge name in mutations.
	EdgeDeposits = "deposits"
	// DepositFieldID holds the string denoting the ID field of the Deposit.
	DepositFieldID = "oid"
	// Table holds the table name of the fund in the database.
	Table = "funds"
	// DepositsTable is the table that holds the deposits relation/edge. The primary key declared below.
	DepositsTable = "fund_deposits"
	// DepositsInverseTable is the table name for the Deposit entity.
	// It exists in this package in order to avoid circular dependency with the "deposit" package.
	DepositsInverseTable = "deposits"
)

// Columns holds all SQL columns for fund fields.
var Columns = []string{
	FieldID,
	FieldName,
}

var (
	// DepositsPrimaryKey and DepositsColumn2 are the table columns denoting the
	// primary key for the deposits relation (M2M).
	DepositsPrimaryKey = []string{"fund_id", "deposit_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "Name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Fund queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the Name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDepositsCount orders the results by deposits count.
func ByDepositsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newDepositsStep(), opts...)
	}
}

// ByDeposits orders the results by deposits terms.
func ByDeposits(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newDepositsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newDepositsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(DepositsInverseTable, DepositFieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, DepositsTable, DepositsPrimaryKey...),
	)
}
