// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cushon/ent/deposit"
	"cushon/ent/fund"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// FundCreate is the builder for creating a Fund entity.
type FundCreate struct {
	config
	mutation *FundMutation
	hooks    []Hook
}

// SetName sets the "Name" field.
func (fc *FundCreate) SetName(s string) *FundCreate {
	fc.mutation.SetName(s)
	return fc
}

// SetID sets the "id" field.
func (fc *FundCreate) SetID(u uuid.UUID) *FundCreate {
	fc.mutation.SetID(u)
	return fc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fc *FundCreate) SetNillableID(u *uuid.UUID) *FundCreate {
	if u != nil {
		fc.SetID(*u)
	}
	return fc
}

// AddDepositIDs adds the "deposits" edge to the Deposit entity by IDs.
func (fc *FundCreate) AddDepositIDs(ids ...uuid.UUID) *FundCreate {
	fc.mutation.AddDepositIDs(ids...)
	return fc
}

// AddDeposits adds the "deposits" edges to the Deposit entity.
func (fc *FundCreate) AddDeposits(d ...*Deposit) *FundCreate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return fc.AddDepositIDs(ids...)
}

// Mutation returns the FundMutation object of the builder.
func (fc *FundCreate) Mutation() *FundMutation {
	return fc.mutation
}

// Save creates the Fund in the database.
func (fc *FundCreate) Save(ctx context.Context) (*Fund, error) {
	fc.defaults()
	return withHooks(ctx, fc.sqlSave, fc.mutation, fc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fc *FundCreate) SaveX(ctx context.Context) *Fund {
	v, err := fc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fc *FundCreate) Exec(ctx context.Context) error {
	_, err := fc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fc *FundCreate) ExecX(ctx context.Context) {
	if err := fc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fc *FundCreate) defaults() {
	if _, ok := fc.mutation.ID(); !ok {
		v := fund.DefaultID()
		fc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fc *FundCreate) check() error {
	if _, ok := fc.mutation.Name(); !ok {
		return &ValidationError{Name: "Name", err: errors.New(`ent: missing required field "Fund.Name"`)}
	}
	if v, ok := fc.mutation.Name(); ok {
		if err := fund.NameValidator(v); err != nil {
			return &ValidationError{Name: "Name", err: fmt.Errorf(`ent: validator failed for field "Fund.Name": %w`, err)}
		}
	}
	return nil
}

func (fc *FundCreate) sqlSave(ctx context.Context) (*Fund, error) {
	if err := fc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	fc.mutation.id = &_node.ID
	fc.mutation.done = true
	return _node, nil
}

func (fc *FundCreate) createSpec() (*Fund, *sqlgraph.CreateSpec) {
	var (
		_node = &Fund{config: fc.config}
		_spec = sqlgraph.NewCreateSpec(fund.Table, sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID))
	)
	if id, ok := fc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := fc.mutation.Name(); ok {
		_spec.SetField(fund.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := fc.mutation.DepositsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   fund.DepositsTable,
			Columns: fund.DepositsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// FundCreateBulk is the builder for creating many Fund entities in bulk.
type FundCreateBulk struct {
	config
	err      error
	builders []*FundCreate
}

// Save creates the Fund entities in the database.
func (fcb *FundCreateBulk) Save(ctx context.Context) ([]*Fund, error) {
	if fcb.err != nil {
		return nil, fcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fcb.builders))
	nodes := make([]*Fund, len(fcb.builders))
	mutators := make([]Mutator, len(fcb.builders))
	for i := range fcb.builders {
		func(i int, root context.Context) {
			builder := fcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FundMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fcb *FundCreateBulk) SaveX(ctx context.Context) []*Fund {
	v, err := fcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fcb *FundCreateBulk) Exec(ctx context.Context) error {
	_, err := fcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fcb *FundCreateBulk) ExecX(ctx context.Context) {
	if err := fcb.Exec(ctx); err != nil {
		panic(err)
	}
}
