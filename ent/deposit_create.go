// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cushon/ent/customer"
	"cushon/ent/deposit"
	"cushon/ent/fund"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DepositCreate is the builder for creating a Deposit entity.
type DepositCreate struct {
	config
	mutation *DepositMutation
	hooks    []Hook
}

// SetAmount sets the "amount" field.
func (dc *DepositCreate) SetAmount(f float64) *DepositCreate {
	dc.mutation.SetAmount(f)
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DepositCreate) SetCreatedAt(t time.Time) *DepositCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DepositCreate) SetNillableCreatedAt(t *time.Time) *DepositCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DepositCreate) SetID(u uuid.UUID) *DepositCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DepositCreate) SetNillableID(u *uuid.UUID) *DepositCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// AddFundIDs adds the "fund" edge to the Fund entity by IDs.
func (dc *DepositCreate) AddFundIDs(ids ...uuid.UUID) *DepositCreate {
	dc.mutation.AddFundIDs(ids...)
	return dc
}

// AddFund adds the "fund" edges to the Fund entity.
func (dc *DepositCreate) AddFund(f ...*Fund) *DepositCreate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return dc.AddFundIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (dc *DepositCreate) AddCustomerIDs(ids ...uuid.UUID) *DepositCreate {
	dc.mutation.AddCustomerIDs(ids...)
	return dc
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (dc *DepositCreate) AddCustomer(c ...*Customer) *DepositCreate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return dc.AddCustomerIDs(ids...)
}

// Mutation returns the DepositMutation object of the builder.
func (dc *DepositCreate) Mutation() *DepositMutation {
	return dc.mutation
}

// Save creates the Deposit in the database.
func (dc *DepositCreate) Save(ctx context.Context) (*Deposit, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DepositCreate) SaveX(ctx context.Context) *Deposit {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DepositCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DepositCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DepositCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := deposit.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := deposit.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DepositCreate) check() error {
	if _, ok := dc.mutation.Amount(); !ok {
		return &ValidationError{Name: "amount", err: errors.New(`ent: missing required field "Deposit.amount"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Deposit.created_at"`)}
	}
	if len(dc.mutation.FundIDs()) == 0 {
		return &ValidationError{Name: "fund", err: errors.New(`ent: missing required edge "Deposit.fund"`)}
	}
	if len(dc.mutation.CustomerIDs()) == 0 {
		return &ValidationError{Name: "customer", err: errors.New(`ent: missing required edge "Deposit.customer"`)}
	}
	return nil
}

func (dc *DepositCreate) sqlSave(ctx context.Context) (*Deposit, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DepositCreate) createSpec() (*Deposit, *sqlgraph.CreateSpec) {
	var (
		_node = &Deposit{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(deposit.Table, sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.Amount(); ok {
		_spec.SetField(deposit.FieldAmount, field.TypeFloat64, value)
		_node.Amount = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(deposit.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := dc.mutation.FundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.FundTable,
			Columns: deposit.FundPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := dc.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.CustomerTable,
			Columns: deposit.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DepositCreateBulk is the builder for creating many Deposit entities in bulk.
type DepositCreateBulk struct {
	config
	err      error
	builders []*DepositCreate
}

// Save creates the Deposit entities in the database.
func (dcb *DepositCreateBulk) Save(ctx context.Context) ([]*Deposit, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Deposit, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DepositMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DepositCreateBulk) SaveX(ctx context.Context) []*Deposit {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DepositCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DepositCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
