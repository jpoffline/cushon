// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cushon/ent/fund"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Fund is the model entity for the Fund schema.
type Fund struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "Name" field.
	Name string `json:"Name,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the FundQuery when eager-loading is set.
	Edges        FundEdges `json:"edges"`
	selectValues sql.SelectValues
}

// FundEdges holds the relations/edges for other nodes in the graph.
type FundEdges struct {
	// Deposits holds the value of the deposits edge.
	Deposits []*Deposit `json:"deposits,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DepositsOrErr returns the Deposits value or an error if the edge
// was not loaded in eager-loading.
func (e FundEdges) DepositsOrErr() ([]*Deposit, error) {
	if e.loadedTypes[0] {
		return e.Deposits, nil
	}
	return nil, &NotLoadedError{edge: "deposits"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Fund) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case fund.FieldName:
			values[i] = new(sql.NullString)
		case fund.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Fund fields.
func (f *Fund) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case fund.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				f.ID = *value
			}
		case fund.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field Name", values[i])
			} else if value.Valid {
				f.Name = value.String
			}
		default:
			f.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Fund.
// This includes values selected through modifiers, order, etc.
func (f *Fund) Value(name string) (ent.Value, error) {
	return f.selectValues.Get(name)
}

// QueryDeposits queries the "deposits" edge of the Fund entity.
func (f *Fund) QueryDeposits() *DepositQuery {
	return NewFundClient(f.config).QueryDeposits(f)
}

// Update returns a builder for updating this Fund.
// Note that you need to call Fund.Unwrap() before calling this method if this Fund
// was returned from a transaction, and the transaction was committed or rolled back.
func (f *Fund) Update() *FundUpdateOne {
	return NewFundClient(f.config).UpdateOne(f)
}

// Unwrap unwraps the Fund entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (f *Fund) Unwrap() *Fund {
	_tx, ok := f.config.driver.(*txDriver)
	if !ok {
		panic("ent: Fund is not a transactional entity")
	}
	f.config.driver = _tx.drv
	return f
}

// String implements the fmt.Stringer.
func (f *Fund) String() string {
	var builder strings.Builder
	builder.WriteString("Fund(")
	builder.WriteString(fmt.Sprintf("id=%v, ", f.ID))
	builder.WriteString("Name=")
	builder.WriteString(f.Name)
	builder.WriteByte(')')
	return builder.String()
}

// Funds is a parsable slice of Fund.
type Funds []*Fund
