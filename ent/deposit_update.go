// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cushon/ent/customer"
	"cushon/ent/deposit"
	"cushon/ent/fund"
	"cushon/ent/predicate"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
)

// DepositUpdate is the builder for updating Deposit entities.
type DepositUpdate struct {
	config
	hooks    []Hook
	mutation *DepositMutation
}

// Where appends a list predicates to the DepositUpdate builder.
func (du *DepositUpdate) Where(ps ...predicate.Deposit) *DepositUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetAmount sets the "amount" field.
func (du *DepositUpdate) SetAmount(f float64) *DepositUpdate {
	du.mutation.ResetAmount()
	du.mutation.SetAmount(f)
	return du
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (du *DepositUpdate) SetNillableAmount(f *float64) *DepositUpdate {
	if f != nil {
		du.SetAmount(*f)
	}
	return du
}

// AddAmount adds f to the "amount" field.
func (du *DepositUpdate) AddAmount(f float64) *DepositUpdate {
	du.mutation.AddAmount(f)
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DepositUpdate) SetCreatedAt(t time.Time) *DepositUpdate {
	du.mutation.SetCreatedAt(t)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DepositUpdate) SetNillableCreatedAt(t *time.Time) *DepositUpdate {
	if t != nil {
		du.SetCreatedAt(*t)
	}
	return du
}

// AddFundIDs adds the "fund" edge to the Fund entity by IDs.
func (du *DepositUpdate) AddFundIDs(ids ...uuid.UUID) *DepositUpdate {
	du.mutation.AddFundIDs(ids...)
	return du
}

// AddFund adds the "fund" edges to the Fund entity.
func (du *DepositUpdate) AddFund(f ...*Fund) *DepositUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return du.AddFundIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (du *DepositUpdate) AddCustomerIDs(ids ...uuid.UUID) *DepositUpdate {
	du.mutation.AddCustomerIDs(ids...)
	return du
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (du *DepositUpdate) AddCustomer(c ...*Customer) *DepositUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.AddCustomerIDs(ids...)
}

// Mutation returns the DepositMutation object of the builder.
func (du *DepositUpdate) Mutation() *DepositMutation {
	return du.mutation
}

// ClearFund clears all "fund" edges to the Fund entity.
func (du *DepositUpdate) ClearFund() *DepositUpdate {
	du.mutation.ClearFund()
	return du
}

// RemoveFundIDs removes the "fund" edge to Fund entities by IDs.
func (du *DepositUpdate) RemoveFundIDs(ids ...uuid.UUID) *DepositUpdate {
	du.mutation.RemoveFundIDs(ids...)
	return du
}

// RemoveFund removes "fund" edges to Fund entities.
func (du *DepositUpdate) RemoveFund(f ...*Fund) *DepositUpdate {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return du.RemoveFundIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (du *DepositUpdate) ClearCustomer() *DepositUpdate {
	du.mutation.ClearCustomer()
	return du
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (du *DepositUpdate) RemoveCustomerIDs(ids ...uuid.UUID) *DepositUpdate {
	du.mutation.RemoveCustomerIDs(ids...)
	return du
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (du *DepositUpdate) RemoveCustomer(c ...*Customer) *DepositUpdate {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return du.RemoveCustomerIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DepositUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DepositUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DepositUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DepositUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DepositUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(deposit.Table, deposit.Columns, sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.Amount(); ok {
		_spec.SetField(deposit.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.AddedAmount(); ok {
		_spec.AddField(deposit.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(deposit.FieldCreatedAt, field.TypeTime, value)
	}
	if du.mutation.FundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.FundTable,
			Columns: deposit.FundPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedFundIDs(); len(nodes) > 0 && !du.mutation.FundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.FundTable,
			Columns: deposit.FundPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.FundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.FundTable,
			Columns: deposit.FundPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if du.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.CustomerTable,
			Columns: deposit.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !du.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.CustomerTable,
			Columns: deposit.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := du.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.CustomerTable,
			Columns: deposit.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deposit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DepositUpdateOne is the builder for updating a single Deposit entity.
type DepositUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DepositMutation
}

// SetAmount sets the "amount" field.
func (duo *DepositUpdateOne) SetAmount(f float64) *DepositUpdateOne {
	duo.mutation.ResetAmount()
	duo.mutation.SetAmount(f)
	return duo
}

// SetNillableAmount sets the "amount" field if the given value is not nil.
func (duo *DepositUpdateOne) SetNillableAmount(f *float64) *DepositUpdateOne {
	if f != nil {
		duo.SetAmount(*f)
	}
	return duo
}

// AddAmount adds f to the "amount" field.
func (duo *DepositUpdateOne) AddAmount(f float64) *DepositUpdateOne {
	duo.mutation.AddAmount(f)
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DepositUpdateOne) SetCreatedAt(t time.Time) *DepositUpdateOne {
	duo.mutation.SetCreatedAt(t)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DepositUpdateOne) SetNillableCreatedAt(t *time.Time) *DepositUpdateOne {
	if t != nil {
		duo.SetCreatedAt(*t)
	}
	return duo
}

// AddFundIDs adds the "fund" edge to the Fund entity by IDs.
func (duo *DepositUpdateOne) AddFundIDs(ids ...uuid.UUID) *DepositUpdateOne {
	duo.mutation.AddFundIDs(ids...)
	return duo
}

// AddFund adds the "fund" edges to the Fund entity.
func (duo *DepositUpdateOne) AddFund(f ...*Fund) *DepositUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return duo.AddFundIDs(ids...)
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by IDs.
func (duo *DepositUpdateOne) AddCustomerIDs(ids ...uuid.UUID) *DepositUpdateOne {
	duo.mutation.AddCustomerIDs(ids...)
	return duo
}

// AddCustomer adds the "customer" edges to the Customer entity.
func (duo *DepositUpdateOne) AddCustomer(c ...*Customer) *DepositUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.AddCustomerIDs(ids...)
}

// Mutation returns the DepositMutation object of the builder.
func (duo *DepositUpdateOne) Mutation() *DepositMutation {
	return duo.mutation
}

// ClearFund clears all "fund" edges to the Fund entity.
func (duo *DepositUpdateOne) ClearFund() *DepositUpdateOne {
	duo.mutation.ClearFund()
	return duo
}

// RemoveFundIDs removes the "fund" edge to Fund entities by IDs.
func (duo *DepositUpdateOne) RemoveFundIDs(ids ...uuid.UUID) *DepositUpdateOne {
	duo.mutation.RemoveFundIDs(ids...)
	return duo
}

// RemoveFund removes "fund" edges to Fund entities.
func (duo *DepositUpdateOne) RemoveFund(f ...*Fund) *DepositUpdateOne {
	ids := make([]uuid.UUID, len(f))
	for i := range f {
		ids[i] = f[i].ID
	}
	return duo.RemoveFundIDs(ids...)
}

// ClearCustomer clears all "customer" edges to the Customer entity.
func (duo *DepositUpdateOne) ClearCustomer() *DepositUpdateOne {
	duo.mutation.ClearCustomer()
	return duo
}

// RemoveCustomerIDs removes the "customer" edge to Customer entities by IDs.
func (duo *DepositUpdateOne) RemoveCustomerIDs(ids ...uuid.UUID) *DepositUpdateOne {
	duo.mutation.RemoveCustomerIDs(ids...)
	return duo
}

// RemoveCustomer removes "customer" edges to Customer entities.
func (duo *DepositUpdateOne) RemoveCustomer(c ...*Customer) *DepositUpdateOne {
	ids := make([]uuid.UUID, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return duo.RemoveCustomerIDs(ids...)
}

// Where appends a list predicates to the DepositUpdate builder.
func (duo *DepositUpdateOne) Where(ps ...predicate.Deposit) *DepositUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DepositUpdateOne) Select(field string, fields ...string) *DepositUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Deposit entity.
func (duo *DepositUpdateOne) Save(ctx context.Context) (*Deposit, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DepositUpdateOne) SaveX(ctx context.Context) *Deposit {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DepositUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DepositUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DepositUpdateOne) sqlSave(ctx context.Context) (_node *Deposit, err error) {
	_spec := sqlgraph.NewUpdateSpec(deposit.Table, deposit.Columns, sqlgraph.NewFieldSpec(deposit.FieldID, field.TypeUUID))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Deposit.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, deposit.FieldID)
		for _, f := range fields {
			if !deposit.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != deposit.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.Amount(); ok {
		_spec.SetField(deposit.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.AddedAmount(); ok {
		_spec.AddField(deposit.FieldAmount, field.TypeFloat64, value)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(deposit.FieldCreatedAt, field.TypeTime, value)
	}
	if duo.mutation.FundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.FundTable,
			Columns: deposit.FundPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedFundIDs(); len(nodes) > 0 && !duo.mutation.FundCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.FundTable,
			Columns: deposit.FundPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.FundIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.FundTable,
			Columns: deposit.FundPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(fund.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if duo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.CustomerTable,
			Columns: deposit.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.RemovedCustomerIDs(); len(nodes) > 0 && !duo.mutation.CustomerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.CustomerTable,
			Columns: deposit.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := duo.mutation.CustomerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   deposit.CustomerTable,
			Columns: deposit.CustomerPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(customer.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Deposit{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{deposit.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
