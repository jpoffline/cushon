// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"cushon/ent/customer"
	"cushon/ent/deposit"
	"cushon/ent/fund"
	"cushon/ent/predicate"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeCustomer = "Customer"
	TypeDeposit  = "Deposit"
	TypeFund     = "Fund"
)

// CustomerMutation represents an operation that mutates the Customer nodes in the graph.
type CustomerMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	_Name           *string
	clearedFields   map[string]struct{}
	deposits        map[uuid.UUID]struct{}
	removeddeposits map[uuid.UUID]struct{}
	cleareddeposits bool
	done            bool
	oldValue        func(context.Context) (*Customer, error)
	predicates      []predicate.Customer
}

var _ ent.Mutation = (*CustomerMutation)(nil)

// customerOption allows management of the mutation configuration using functional options.
type customerOption func(*CustomerMutation)

// newCustomerMutation creates new mutation for the Customer entity.
func newCustomerMutation(c config, op Op, opts ...customerOption) *CustomerMutation {
	m := &CustomerMutation{
		config:        c,
		op:            op,
		typ:           TypeCustomer,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withCustomerID sets the ID field of the mutation.
func withCustomerID(id uuid.UUID) customerOption {
	return func(m *CustomerMutation) {
		var (
			err   error
			once  sync.Once
			value *Customer
		)
		m.oldValue = func(ctx context.Context) (*Customer, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Customer.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withCustomer sets the old Customer of the mutation.
func withCustomer(node *Customer) customerOption {
	return func(m *CustomerMutation) {
		m.oldValue = func(context.Context) (*Customer, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m CustomerMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m CustomerMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Customer entities.
func (m *CustomerMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *CustomerMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *CustomerMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Customer.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *CustomerMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *CustomerMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Customer entity.
// If the Customer object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *CustomerMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *CustomerMutation) ResetName() {
	m._Name = nil
}

// AddDepositIDs adds the "deposits" edge to the Deposit entity by ids.
func (m *CustomerMutation) AddDepositIDs(ids ...uuid.UUID) {
	if m.deposits == nil {
		m.deposits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.deposits[ids[i]] = struct{}{}
	}
}

// ClearDeposits clears the "deposits" edge to the Deposit entity.
func (m *CustomerMutation) ClearDeposits() {
	m.cleareddeposits = true
}

// DepositsCleared reports if the "deposits" edge to the Deposit entity was cleared.
func (m *CustomerMutation) DepositsCleared() bool {
	return m.cleareddeposits
}

// RemoveDepositIDs removes the "deposits" edge to the Deposit entity by IDs.
func (m *CustomerMutation) RemoveDepositIDs(ids ...uuid.UUID) {
	if m.removeddeposits == nil {
		m.removeddeposits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.deposits, ids[i])
		m.removeddeposits[ids[i]] = struct{}{}
	}
}

// RemovedDeposits returns the removed IDs of the "deposits" edge to the Deposit entity.
func (m *CustomerMutation) RemovedDepositsIDs() (ids []uuid.UUID) {
	for id := range m.removeddeposits {
		ids = append(ids, id)
	}
	return
}

// DepositsIDs returns the "deposits" edge IDs in the mutation.
func (m *CustomerMutation) DepositsIDs() (ids []uuid.UUID) {
	for id := range m.deposits {
		ids = append(ids, id)
	}
	return
}

// ResetDeposits resets all changes to the "deposits" edge.
func (m *CustomerMutation) ResetDeposits() {
	m.deposits = nil
	m.cleareddeposits = false
	m.removeddeposits = nil
}

// Where appends a list predicates to the CustomerMutation builder.
func (m *CustomerMutation) Where(ps ...predicate.Customer) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the CustomerMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *CustomerMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Customer, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *CustomerMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *CustomerMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Customer).
func (m *CustomerMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *CustomerMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, customer.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *CustomerMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case customer.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *CustomerMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case customer.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Customer field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) SetField(name string, value ent.Value) error {
	switch name {
	case customer.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *CustomerMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *CustomerMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *CustomerMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *CustomerMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *CustomerMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *CustomerMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Customer nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *CustomerMutation) ResetField(name string) error {
	switch name {
	case customer.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Customer field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *CustomerMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deposits != nil {
		edges = append(edges, customer.EdgeDeposits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *CustomerMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeDeposits:
		ids := make([]ent.Value, 0, len(m.deposits))
		for id := range m.deposits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *CustomerMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddeposits != nil {
		edges = append(edges, customer.EdgeDeposits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *CustomerMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case customer.EdgeDeposits:
		ids := make([]ent.Value, 0, len(m.removeddeposits))
		for id := range m.removeddeposits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *CustomerMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddeposits {
		edges = append(edges, customer.EdgeDeposits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *CustomerMutation) EdgeCleared(name string) bool {
	switch name {
	case customer.EdgeDeposits:
		return m.cleareddeposits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *CustomerMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Customer unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *CustomerMutation) ResetEdge(name string) error {
	switch name {
	case customer.EdgeDeposits:
		m.ResetDeposits()
		return nil
	}
	return fmt.Errorf("unknown Customer edge %s", name)
}

// DepositMutation represents an operation that mutates the Deposit nodes in the graph.
type DepositMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	amount          *float64
	addamount       *float64
	created_at      *time.Time
	clearedFields   map[string]struct{}
	fund            map[uuid.UUID]struct{}
	removedfund     map[uuid.UUID]struct{}
	clearedfund     bool
	customer        map[uuid.UUID]struct{}
	removedcustomer map[uuid.UUID]struct{}
	clearedcustomer bool
	done            bool
	oldValue        func(context.Context) (*Deposit, error)
	predicates      []predicate.Deposit
}

var _ ent.Mutation = (*DepositMutation)(nil)

// depositOption allows management of the mutation configuration using functional options.
type depositOption func(*DepositMutation)

// newDepositMutation creates new mutation for the Deposit entity.
func newDepositMutation(c config, op Op, opts ...depositOption) *DepositMutation {
	m := &DepositMutation{
		config:        c,
		op:            op,
		typ:           TypeDeposit,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withDepositID sets the ID field of the mutation.
func withDepositID(id uuid.UUID) depositOption {
	return func(m *DepositMutation) {
		var (
			err   error
			once  sync.Once
			value *Deposit
		)
		m.oldValue = func(ctx context.Context) (*Deposit, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Deposit.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withDeposit sets the old Deposit of the mutation.
func withDeposit(node *Deposit) depositOption {
	return func(m *DepositMutation) {
		m.oldValue = func(context.Context) (*Deposit, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m DepositMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m DepositMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Deposit entities.
func (m *DepositMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *DepositMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *DepositMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Deposit.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAmount sets the "amount" field.
func (m *DepositMutation) SetAmount(f float64) {
	m.amount = &f
	m.addamount = nil
}

// Amount returns the value of the "amount" field in the mutation.
func (m *DepositMutation) Amount() (r float64, exists bool) {
	v := m.amount
	if v == nil {
		return
	}
	return *v, true
}

// OldAmount returns the old "amount" field's value of the Deposit entity.
// If the Deposit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepositMutation) OldAmount(ctx context.Context) (v float64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAmount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAmount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAmount: %w", err)
	}
	return oldValue.Amount, nil
}

// AddAmount adds f to the "amount" field.
func (m *DepositMutation) AddAmount(f float64) {
	if m.addamount != nil {
		*m.addamount += f
	} else {
		m.addamount = &f
	}
}

// AddedAmount returns the value that was added to the "amount" field in this mutation.
func (m *DepositMutation) AddedAmount() (r float64, exists bool) {
	v := m.addamount
	if v == nil {
		return
	}
	return *v, true
}

// ResetAmount resets all changes to the "amount" field.
func (m *DepositMutation) ResetAmount() {
	m.amount = nil
	m.addamount = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *DepositMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *DepositMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Deposit entity.
// If the Deposit object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *DepositMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *DepositMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddFundIDs adds the "fund" edge to the Fund entity by ids.
func (m *DepositMutation) AddFundIDs(ids ...uuid.UUID) {
	if m.fund == nil {
		m.fund = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.fund[ids[i]] = struct{}{}
	}
}

// ClearFund clears the "fund" edge to the Fund entity.
func (m *DepositMutation) ClearFund() {
	m.clearedfund = true
}

// FundCleared reports if the "fund" edge to the Fund entity was cleared.
func (m *DepositMutation) FundCleared() bool {
	return m.clearedfund
}

// RemoveFundIDs removes the "fund" edge to the Fund entity by IDs.
func (m *DepositMutation) RemoveFundIDs(ids ...uuid.UUID) {
	if m.removedfund == nil {
		m.removedfund = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.fund, ids[i])
		m.removedfund[ids[i]] = struct{}{}
	}
}

// RemovedFund returns the removed IDs of the "fund" edge to the Fund entity.
func (m *DepositMutation) RemovedFundIDs() (ids []uuid.UUID) {
	for id := range m.removedfund {
		ids = append(ids, id)
	}
	return
}

// FundIDs returns the "fund" edge IDs in the mutation.
func (m *DepositMutation) FundIDs() (ids []uuid.UUID) {
	for id := range m.fund {
		ids = append(ids, id)
	}
	return
}

// ResetFund resets all changes to the "fund" edge.
func (m *DepositMutation) ResetFund() {
	m.fund = nil
	m.clearedfund = false
	m.removedfund = nil
}

// AddCustomerIDs adds the "customer" edge to the Customer entity by ids.
func (m *DepositMutation) AddCustomerIDs(ids ...uuid.UUID) {
	if m.customer == nil {
		m.customer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.customer[ids[i]] = struct{}{}
	}
}

// ClearCustomer clears the "customer" edge to the Customer entity.
func (m *DepositMutation) ClearCustomer() {
	m.clearedcustomer = true
}

// CustomerCleared reports if the "customer" edge to the Customer entity was cleared.
func (m *DepositMutation) CustomerCleared() bool {
	return m.clearedcustomer
}

// RemoveCustomerIDs removes the "customer" edge to the Customer entity by IDs.
func (m *DepositMutation) RemoveCustomerIDs(ids ...uuid.UUID) {
	if m.removedcustomer == nil {
		m.removedcustomer = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.customer, ids[i])
		m.removedcustomer[ids[i]] = struct{}{}
	}
}

// RemovedCustomer returns the removed IDs of the "customer" edge to the Customer entity.
func (m *DepositMutation) RemovedCustomerIDs() (ids []uuid.UUID) {
	for id := range m.removedcustomer {
		ids = append(ids, id)
	}
	return
}

// CustomerIDs returns the "customer" edge IDs in the mutation.
func (m *DepositMutation) CustomerIDs() (ids []uuid.UUID) {
	for id := range m.customer {
		ids = append(ids, id)
	}
	return
}

// ResetCustomer resets all changes to the "customer" edge.
func (m *DepositMutation) ResetCustomer() {
	m.customer = nil
	m.clearedcustomer = false
	m.removedcustomer = nil
}

// Where appends a list predicates to the DepositMutation builder.
func (m *DepositMutation) Where(ps ...predicate.Deposit) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the DepositMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *DepositMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Deposit, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *DepositMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *DepositMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Deposit).
func (m *DepositMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *DepositMutation) Fields() []string {
	fields := make([]string, 0, 2)
	if m.amount != nil {
		fields = append(fields, deposit.FieldAmount)
	}
	if m.created_at != nil {
		fields = append(fields, deposit.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *DepositMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case deposit.FieldAmount:
		return m.Amount()
	case deposit.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *DepositMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case deposit.FieldAmount:
		return m.OldAmount(ctx)
	case deposit.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Deposit field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DepositMutation) SetField(name string, value ent.Value) error {
	switch name {
	case deposit.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAmount(v)
		return nil
	case deposit.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Deposit field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *DepositMutation) AddedFields() []string {
	var fields []string
	if m.addamount != nil {
		fields = append(fields, deposit.FieldAmount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *DepositMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case deposit.FieldAmount:
		return m.AddedAmount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *DepositMutation) AddField(name string, value ent.Value) error {
	switch name {
	case deposit.FieldAmount:
		v, ok := value.(float64)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAmount(v)
		return nil
	}
	return fmt.Errorf("unknown Deposit numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *DepositMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *DepositMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *DepositMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Deposit nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *DepositMutation) ResetField(name string) error {
	switch name {
	case deposit.FieldAmount:
		m.ResetAmount()
		return nil
	case deposit.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Deposit field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *DepositMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.fund != nil {
		edges = append(edges, deposit.EdgeFund)
	}
	if m.customer != nil {
		edges = append(edges, deposit.EdgeCustomer)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *DepositMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case deposit.EdgeFund:
		ids := make([]ent.Value, 0, len(m.fund))
		for id := range m.fund {
			ids = append(ids, id)
		}
		return ids
	case deposit.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.customer))
		for id := range m.customer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *DepositMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	if m.removedfund != nil {
		edges = append(edges, deposit.EdgeFund)
	}
	if m.removedcustomer != nil {
		edges = append(edges, deposit.EdgeCustomer)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *DepositMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case deposit.EdgeFund:
		ids := make([]ent.Value, 0, len(m.removedfund))
		for id := range m.removedfund {
			ids = append(ids, id)
		}
		return ids
	case deposit.EdgeCustomer:
		ids := make([]ent.Value, 0, len(m.removedcustomer))
		for id := range m.removedcustomer {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *DepositMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedfund {
		edges = append(edges, deposit.EdgeFund)
	}
	if m.clearedcustomer {
		edges = append(edges, deposit.EdgeCustomer)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *DepositMutation) EdgeCleared(name string) bool {
	switch name {
	case deposit.EdgeFund:
		return m.clearedfund
	case deposit.EdgeCustomer:
		return m.clearedcustomer
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *DepositMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Deposit unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *DepositMutation) ResetEdge(name string) error {
	switch name {
	case deposit.EdgeFund:
		m.ResetFund()
		return nil
	case deposit.EdgeCustomer:
		m.ResetCustomer()
		return nil
	}
	return fmt.Errorf("unknown Deposit edge %s", name)
}

// FundMutation represents an operation that mutates the Fund nodes in the graph.
type FundMutation struct {
	config
	op              Op
	typ             string
	id              *uuid.UUID
	_Name           *string
	clearedFields   map[string]struct{}
	deposits        map[uuid.UUID]struct{}
	removeddeposits map[uuid.UUID]struct{}
	cleareddeposits bool
	done            bool
	oldValue        func(context.Context) (*Fund, error)
	predicates      []predicate.Fund
}

var _ ent.Mutation = (*FundMutation)(nil)

// fundOption allows management of the mutation configuration using functional options.
type fundOption func(*FundMutation)

// newFundMutation creates new mutation for the Fund entity.
func newFundMutation(c config, op Op, opts ...fundOption) *FundMutation {
	m := &FundMutation{
		config:        c,
		op:            op,
		typ:           TypeFund,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withFundID sets the ID field of the mutation.
func withFundID(id uuid.UUID) fundOption {
	return func(m *FundMutation) {
		var (
			err   error
			once  sync.Once
			value *Fund
		)
		m.oldValue = func(ctx context.Context) (*Fund, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Fund.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withFund sets the old Fund of the mutation.
func withFund(node *Fund) fundOption {
	return func(m *FundMutation) {
		m.oldValue = func(context.Context) (*Fund, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m FundMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m FundMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Fund entities.
func (m *FundMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *FundMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *FundMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Fund.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "Name" field.
func (m *FundMutation) SetName(s string) {
	m._Name = &s
}

// Name returns the value of the "Name" field in the mutation.
func (m *FundMutation) Name() (r string, exists bool) {
	v := m._Name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "Name" field's value of the Fund entity.
// If the Fund object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *FundMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "Name" field.
func (m *FundMutation) ResetName() {
	m._Name = nil
}

// AddDepositIDs adds the "deposits" edge to the Deposit entity by ids.
func (m *FundMutation) AddDepositIDs(ids ...uuid.UUID) {
	if m.deposits == nil {
		m.deposits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.deposits[ids[i]] = struct{}{}
	}
}

// ClearDeposits clears the "deposits" edge to the Deposit entity.
func (m *FundMutation) ClearDeposits() {
	m.cleareddeposits = true
}

// DepositsCleared reports if the "deposits" edge to the Deposit entity was cleared.
func (m *FundMutation) DepositsCleared() bool {
	return m.cleareddeposits
}

// RemoveDepositIDs removes the "deposits" edge to the Deposit entity by IDs.
func (m *FundMutation) RemoveDepositIDs(ids ...uuid.UUID) {
	if m.removeddeposits == nil {
		m.removeddeposits = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.deposits, ids[i])
		m.removeddeposits[ids[i]] = struct{}{}
	}
}

// RemovedDeposits returns the removed IDs of the "deposits" edge to the Deposit entity.
func (m *FundMutation) RemovedDepositsIDs() (ids []uuid.UUID) {
	for id := range m.removeddeposits {
		ids = append(ids, id)
	}
	return
}

// DepositsIDs returns the "deposits" edge IDs in the mutation.
func (m *FundMutation) DepositsIDs() (ids []uuid.UUID) {
	for id := range m.deposits {
		ids = append(ids, id)
	}
	return
}

// ResetDeposits resets all changes to the "deposits" edge.
func (m *FundMutation) ResetDeposits() {
	m.deposits = nil
	m.cleareddeposits = false
	m.removeddeposits = nil
}

// Where appends a list predicates to the FundMutation builder.
func (m *FundMutation) Where(ps ...predicate.Fund) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the FundMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *FundMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Fund, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *FundMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *FundMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Fund).
func (m *FundMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *FundMutation) Fields() []string {
	fields := make([]string, 0, 1)
	if m._Name != nil {
		fields = append(fields, fund.FieldName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *FundMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case fund.FieldName:
		return m.Name()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *FundMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case fund.FieldName:
		return m.OldName(ctx)
	}
	return nil, fmt.Errorf("unknown Fund field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FundMutation) SetField(name string, value ent.Value) error {
	switch name {
	case fund.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	}
	return fmt.Errorf("unknown Fund field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *FundMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *FundMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *FundMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Fund numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *FundMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *FundMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *FundMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Fund nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *FundMutation) ResetField(name string) error {
	switch name {
	case fund.FieldName:
		m.ResetName()
		return nil
	}
	return fmt.Errorf("unknown Fund field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *FundMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.deposits != nil {
		edges = append(edges, fund.EdgeDeposits)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *FundMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case fund.EdgeDeposits:
		ids := make([]ent.Value, 0, len(m.deposits))
		for id := range m.deposits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *FundMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removeddeposits != nil {
		edges = append(edges, fund.EdgeDeposits)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *FundMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case fund.EdgeDeposits:
		ids := make([]ent.Value, 0, len(m.removeddeposits))
		for id := range m.removeddeposits {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *FundMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareddeposits {
		edges = append(edges, fund.EdgeDeposits)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *FundMutation) EdgeCleared(name string) bool {
	switch name {
	case fund.EdgeDeposits:
		return m.cleareddeposits
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *FundMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Fund unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *FundMutation) ResetEdge(name string) error {
	switch name {
	case fund.EdgeDeposits:
		m.ResetDeposits()
		return nil
	}
	return fmt.Errorf("unknown Fund edge %s", name)
}
