// Code generated by ent, DO NOT EDIT.

package ent

import (
	"cushon/ent/deposit"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Deposit is the model entity for the Deposit schema.
type Deposit struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Amount holds the value of the "amount" field.
	Amount float64 `json:"amount,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DepositQuery when eager-loading is set.
	Edges        DepositEdges `json:"edges"`
	selectValues sql.SelectValues
}

// DepositEdges holds the relations/edges for other nodes in the graph.
type DepositEdges struct {
	// Fund holds the value of the fund edge.
	Fund []*Fund `json:"fund,omitempty"`
	// Customer holds the value of the customer edge.
	Customer []*Customer `json:"customer,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// FundOrErr returns the Fund value or an error if the edge
// was not loaded in eager-loading.
func (e DepositEdges) FundOrErr() ([]*Fund, error) {
	if e.loadedTypes[0] {
		return e.Fund, nil
	}
	return nil, &NotLoadedError{edge: "fund"}
}

// CustomerOrErr returns the Customer value or an error if the edge
// was not loaded in eager-loading.
func (e DepositEdges) CustomerOrErr() ([]*Customer, error) {
	if e.loadedTypes[1] {
		return e.Customer, nil
	}
	return nil, &NotLoadedError{edge: "customer"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Deposit) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case deposit.FieldAmount:
			values[i] = new(sql.NullFloat64)
		case deposit.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case deposit.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Deposit fields.
func (d *Deposit) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case deposit.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case deposit.FieldAmount:
			if value, ok := values[i].(*sql.NullFloat64); !ok {
				return fmt.Errorf("unexpected type %T for field amount", values[i])
			} else if value.Valid {
				d.Amount = value.Float64
			}
		case deposit.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Deposit.
// This includes values selected through modifiers, order, etc.
func (d *Deposit) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryFund queries the "fund" edge of the Deposit entity.
func (d *Deposit) QueryFund() *FundQuery {
	return NewDepositClient(d.config).QueryFund(d)
}

// QueryCustomer queries the "customer" edge of the Deposit entity.
func (d *Deposit) QueryCustomer() *CustomerQuery {
	return NewDepositClient(d.config).QueryCustomer(d)
}

// Update returns a builder for updating this Deposit.
// Note that you need to call Deposit.Unwrap() before calling this method if this Deposit
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Deposit) Update() *DepositUpdateOne {
	return NewDepositClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Deposit entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Deposit) Unwrap() *Deposit {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Deposit is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Deposit) String() string {
	var builder strings.Builder
	builder.WriteString("Deposit(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("amount=")
	builder.WriteString(fmt.Sprintf("%v", d.Amount))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Deposits is a parsable slice of Deposit.
type Deposits []*Deposit
