// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package deposit

import (
	"cushon/pkg/dto"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDepositStore creates a new instance of MockDepositStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDepositStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDepositStore {
	mock := &MockDepositStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDepositStore is an autogenerated mock type for the DepositStore type
type MockDepositStore struct {
	mock.Mock
}

type MockDepositStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDepositStore) EXPECT() *MockDepositStore_Expecter {
	return &MockDepositStore_Expecter{mock: &_m.Mock}
}

// CreateDeposit provides a mock function for the type MockDepositStore
func (_mock *MockDepositStore) CreateDeposit(ctx *gin.Context, input dto.DepositInput) (*dto.Deposit, error) {
	ret := _mock.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateDeposit")
	}

	var r0 *dto.Deposit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, dto.DepositInput) (*dto.Deposit, error)); ok {
		return returnFunc(ctx, input)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, dto.DepositInput) *dto.Deposit); ok {
		r0 = returnFunc(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Deposit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, dto.DepositInput) error); ok {
		r1 = returnFunc(ctx, input)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDepositStore_CreateDeposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDeposit'
type MockDepositStore_CreateDeposit_Call struct {
	*mock.Call
}

// CreateDeposit is a helper method to define mock.On call
//   - ctx *gin.Context
//   - input dto.DepositInput
func (_e *MockDepositStore_Expecter) CreateDeposit(ctx interface{}, input interface{}) *MockDepositStore_CreateDeposit_Call {
	return &MockDepositStore_CreateDeposit_Call{Call: _e.mock.On("CreateDeposit", ctx, input)}
}

func (_c *MockDepositStore_CreateDeposit_Call) Run(run func(ctx *gin.Context, input dto.DepositInput)) *MockDepositStore_CreateDeposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 dto.DepositInput
		if args[1] != nil {
			arg1 = args[1].(dto.DepositInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDepositStore_CreateDeposit_Call) Return(deposit *dto.Deposit, err error) *MockDepositStore_CreateDeposit_Call {
	_c.Call.Return(deposit, err)
	return _c
}

func (_c *MockDepositStore_CreateDeposit_Call) RunAndReturn(run func(ctx *gin.Context, input dto.DepositInput) (*dto.Deposit, error)) *MockDepositStore_CreateDeposit_Call {
	_c.Call.Return(run)
	return _c
}

// IsCustomer provides a mock function for the type MockDepositStore
func (_mock *MockDepositStore) IsCustomer(ctx *gin.Context, customerId uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, customerId)

	if len(ret) == 0 {
		panic("no return value specified for IsCustomer")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, customerId)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, customerId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, customerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDepositStore_IsCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsCustomer'
type MockDepositStore_IsCustomer_Call struct {
	*mock.Call
}

// IsCustomer is a helper method to define mock.On call
//   - ctx *gin.Context
//   - customerId uuid.UUID
func (_e *MockDepositStore_Expecter) IsCustomer(ctx interface{}, customerId interface{}) *MockDepositStore_IsCustomer_Call {
	return &MockDepositStore_IsCustomer_Call{Call: _e.mock.On("IsCustomer", ctx, customerId)}
}

func (_c *MockDepositStore_IsCustomer_Call) Run(run func(ctx *gin.Context, customerId uuid.UUID)) *MockDepositStore_IsCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDepositStore_IsCustomer_Call) Return(b bool, err error) *MockDepositStore_IsCustomer_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockDepositStore_IsCustomer_Call) RunAndReturn(run func(ctx *gin.Context, customerId uuid.UUID) (bool, error)) *MockDepositStore_IsCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// IsFund provides a mock function for the type MockDepositStore
func (_mock *MockDepositStore) IsFund(ctx *gin.Context, fundId uuid.UUID) (bool, error) {
	ret := _mock.Called(ctx, fundId)

	if len(ret) == 0 {
		panic("no return value specified for IsFund")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) (bool, error)); ok {
		return returnFunc(ctx, fundId)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) bool); ok {
		r0 = returnFunc(ctx, fundId)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, fundId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDepositStore_IsFund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsFund'
type MockDepositStore_IsFund_Call struct {
	*mock.Call
}

// IsFund is a helper method to define mock.On call
//   - ctx *gin.Context
//   - fundId uuid.UUID
func (_e *MockDepositStore_Expecter) IsFund(ctx interface{}, fundId interface{}) *MockDepositStore_IsFund_Call {
	return &MockDepositStore_IsFund_Call{Call: _e.mock.On("IsFund", ctx, fundId)}
}

func (_c *MockDepositStore_IsFund_Call) Run(run func(ctx *gin.Context, fundId uuid.UUID)) *MockDepositStore_IsFund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockDepositStore_IsFund_Call) Return(b bool, err error) *MockDepositStore_IsFund_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *MockDepositStore_IsFund_Call) RunAndReturn(run func(ctx *gin.Context, fundId uuid.UUID) (bool, error)) *MockDepositStore_IsFund_Call {
	_c.Call.Return(run)
	return _c
}
