// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package customers

import (
	"cushon/pkg/dto"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCustomerStore creates a new instance of MockCustomerStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerStore {
	mock := &MockCustomerStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCustomerStore is an autogenerated mock type for the CustomerStore type
type MockCustomerStore struct {
	mock.Mock
}

type MockCustomerStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerStore) EXPECT() *MockCustomerStore_Expecter {
	return &MockCustomerStore_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function for the type MockCustomerStore
func (_mock *MockCustomerStore) CreateCustomer(ctx *gin.Context, customer *dto.CustomerInput) (*dto.Customer, error) {
	ret := _mock.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 *dto.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.CustomerInput) (*dto.Customer, error)); ok {
		return returnFunc(ctx, customer)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.CustomerInput) *dto.Customer); ok {
		r0 = returnFunc(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *dto.CustomerInput) error); ok {
		r1 = returnFunc(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerStore_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type MockCustomerStore_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - ctx *gin.Context
//   - customer *dto.CustomerInput
func (_e *MockCustomerStore_Expecter) CreateCustomer(ctx interface{}, customer interface{}) *MockCustomerStore_CreateCustomer_Call {
	return &MockCustomerStore_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", ctx, customer)}
}

func (_c *MockCustomerStore_CreateCustomer_Call) Run(run func(ctx *gin.Context, customer *dto.CustomerInput)) *MockCustomerStore_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 *dto.CustomerInput
		if args[1] != nil {
			arg1 = args[1].(*dto.CustomerInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCustomerStore_CreateCustomer_Call) Return(customer1 *dto.Customer, err error) *MockCustomerStore_CreateCustomer_Call {
	_c.Call.Return(customer1, err)
	return _c
}

func (_c *MockCustomerStore_CreateCustomer_Call) RunAndReturn(run func(ctx *gin.Context, customer *dto.CustomerInput) (*dto.Customer, error)) *MockCustomerStore_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomers provides a mock function for the type MockCustomerStore
func (_mock *MockCustomerStore) GetCustomers(ctx *gin.Context) ([]*dto.Customer, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomers")
	}

	var r0 []*dto.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) ([]*dto.Customer, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) []*dto.Customer); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerStore_GetCustomers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomers'
type MockCustomerStore_GetCustomers_Call struct {
	*mock.Call
}

// GetCustomers is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockCustomerStore_Expecter) GetCustomers(ctx interface{}) *MockCustomerStore_GetCustomers_Call {
	return &MockCustomerStore_GetCustomers_Call{Call: _e.mock.On("GetCustomers", ctx)}
}

func (_c *MockCustomerStore_GetCustomers_Call) Run(run func(ctx *gin.Context)) *MockCustomerStore_GetCustomers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerStore_GetCustomers_Call) Return(customers []*dto.Customer, err error) *MockCustomerStore_GetCustomers_Call {
	_c.Call.Return(customers, err)
	return _c
}

func (_c *MockCustomerStore_GetCustomers_Call) RunAndReturn(run func(ctx *gin.Context) ([]*dto.Customer, error)) *MockCustomerStore_GetCustomers_Call {
	_c.Call.Return(run)
	return _c
}

// GetDepositsByCustomerId provides a mock function for the type MockCustomerStore
func (_mock *MockCustomerStore) GetDepositsByCustomerId(ctx *gin.Context, customerId uuid.UUID) ([]*dto.Deposit, error) {
	ret := _mock.Called(ctx, customerId)

	if len(ret) == 0 {
		panic("no return value specified for GetDepositsByCustomerId")
	}

	var r0 []*dto.Deposit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) ([]*dto.Deposit, error)); ok {
		return returnFunc(ctx, customerId)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) []*dto.Deposit); ok {
		r0 = returnFunc(ctx, customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Deposit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, customerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerStore_GetDepositsByCustomerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepositsByCustomerId'
type MockCustomerStore_GetDepositsByCustomerId_Call struct {
	*mock.Call
}

// GetDepositsByCustomerId is a helper method to define mock.On call
//   - ctx *gin.Context
//   - customerId uuid.UUID
func (_e *MockCustomerStore_Expecter) GetDepositsByCustomerId(ctx interface{}, customerId interface{}) *MockCustomerStore_GetDepositsByCustomerId_Call {
	return &MockCustomerStore_GetDepositsByCustomerId_Call{Call: _e.mock.On("GetDepositsByCustomerId", ctx, customerId)}
}

func (_c *MockCustomerStore_GetDepositsByCustomerId_Call) Run(run func(ctx *gin.Context, customerId uuid.UUID)) *MockCustomerStore_GetDepositsByCustomerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCustomerStore_GetDepositsByCustomerId_Call) Return(deposits []*dto.Deposit, err error) *MockCustomerStore_GetDepositsByCustomerId_Call {
	_c.Call.Return(deposits, err)
	return _c
}

func (_c *MockCustomerStore_GetDepositsByCustomerId_Call) RunAndReturn(run func(ctx *gin.Context, customerId uuid.UUID) ([]*dto.Deposit, error)) *MockCustomerStore_GetDepositsByCustomerId_Call {
	_c.Call.Return(run)
	return _c
}
