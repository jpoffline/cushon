// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"cushon/pkg/dto"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCustomerService creates a new instance of MockCustomerService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCustomerService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCustomerService {
	mock := &MockCustomerService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCustomerService is an autogenerated mock type for the CustomerService type
type MockCustomerService struct {
	mock.Mock
}

type MockCustomerService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCustomerService) EXPECT() *MockCustomerService_Expecter {
	return &MockCustomerService_Expecter{mock: &_m.Mock}
}

// CreateCustomer provides a mock function for the type MockCustomerService
func (_mock *MockCustomerService) CreateCustomer(ctx *gin.Context, customer *dto.CustomerInput) (*dto.Customer, error) {
	ret := _mock.Called(ctx, customer)

	if len(ret) == 0 {
		panic("no return value specified for CreateCustomer")
	}

	var r0 *dto.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.CustomerInput) (*dto.Customer, error)); ok {
		return returnFunc(ctx, customer)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.CustomerInput) *dto.Customer); ok {
		r0 = returnFunc(ctx, customer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *dto.CustomerInput) error); ok {
		r1 = returnFunc(ctx, customer)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerService_CreateCustomer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateCustomer'
type MockCustomerService_CreateCustomer_Call struct {
	*mock.Call
}

// CreateCustomer is a helper method to define mock.On call
//   - ctx *gin.Context
//   - customer *dto.CustomerInput
func (_e *MockCustomerService_Expecter) CreateCustomer(ctx interface{}, customer interface{}) *MockCustomerService_CreateCustomer_Call {
	return &MockCustomerService_CreateCustomer_Call{Call: _e.mock.On("CreateCustomer", ctx, customer)}
}

func (_c *MockCustomerService_CreateCustomer_Call) Run(run func(ctx *gin.Context, customer *dto.CustomerInput)) *MockCustomerService_CreateCustomer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 *dto.CustomerInput
		if args[1] != nil {
			arg1 = args[1].(*dto.CustomerInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCustomerService_CreateCustomer_Call) Return(customer1 *dto.Customer, err error) *MockCustomerService_CreateCustomer_Call {
	_c.Call.Return(customer1, err)
	return _c
}

func (_c *MockCustomerService_CreateCustomer_Call) RunAndReturn(run func(ctx *gin.Context, customer *dto.CustomerInput) (*dto.Customer, error)) *MockCustomerService_CreateCustomer_Call {
	_c.Call.Return(run)
	return _c
}

// GetCustomers provides a mock function for the type MockCustomerService
func (_mock *MockCustomerService) GetCustomers(ctx *gin.Context) ([]*dto.Customer, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetCustomers")
	}

	var r0 []*dto.Customer
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) ([]*dto.Customer, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) []*dto.Customer); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Customer)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerService_GetCustomers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCustomers'
type MockCustomerService_GetCustomers_Call struct {
	*mock.Call
}

// GetCustomers is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockCustomerService_Expecter) GetCustomers(ctx interface{}) *MockCustomerService_GetCustomers_Call {
	return &MockCustomerService_GetCustomers_Call{Call: _e.mock.On("GetCustomers", ctx)}
}

func (_c *MockCustomerService_GetCustomers_Call) Run(run func(ctx *gin.Context)) *MockCustomerService_GetCustomers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCustomerService_GetCustomers_Call) Return(customers []*dto.Customer, err error) *MockCustomerService_GetCustomers_Call {
	_c.Call.Return(customers, err)
	return _c
}

func (_c *MockCustomerService_GetCustomers_Call) RunAndReturn(run func(ctx *gin.Context) ([]*dto.Customer, error)) *MockCustomerService_GetCustomers_Call {
	_c.Call.Return(run)
	return _c
}

// GetDepositsByCustomerId provides a mock function for the type MockCustomerService
func (_mock *MockCustomerService) GetDepositsByCustomerId(ctx *gin.Context, customerId uuid.UUID) ([]*dto.Deposit, error) {
	ret := _mock.Called(ctx, customerId)

	if len(ret) == 0 {
		panic("no return value specified for GetDepositsByCustomerId")
	}

	var r0 []*dto.Deposit
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) ([]*dto.Deposit, error)); ok {
		return returnFunc(ctx, customerId)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, uuid.UUID) []*dto.Deposit); ok {
		r0 = returnFunc(ctx, customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Deposit)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, uuid.UUID) error); ok {
		r1 = returnFunc(ctx, customerId)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockCustomerService_GetDepositsByCustomerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDepositsByCustomerId'
type MockCustomerService_GetDepositsByCustomerId_Call struct {
	*mock.Call
}

// GetDepositsByCustomerId is a helper method to define mock.On call
//   - ctx *gin.Context
//   - customerId uuid.UUID
func (_e *MockCustomerService_Expecter) GetDepositsByCustomerId(ctx interface{}, customerId interface{}) *MockCustomerService_GetDepositsByCustomerId_Call {
	return &MockCustomerService_GetDepositsByCustomerId_Call{Call: _e.mock.On("GetDepositsByCustomerId", ctx, customerId)}
}

func (_c *MockCustomerService_GetDepositsByCustomerId_Call) Run(run func(ctx *gin.Context, customerId uuid.UUID)) *MockCustomerService_GetDepositsByCustomerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 uuid.UUID
		if args[1] != nil {
			arg1 = args[1].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockCustomerService_GetDepositsByCustomerId_Call) Return(deposits []*dto.Deposit, err error) *MockCustomerService_GetDepositsByCustomerId_Call {
	_c.Call.Return(deposits, err)
	return _c
}

func (_c *MockCustomerService_GetDepositsByCustomerId_Call) RunAndReturn(run func(ctx *gin.Context, customerId uuid.UUID) ([]*dto.Deposit, error)) *MockCustomerService_GetDepositsByCustomerId_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockDepositService creates a new instance of MockDepositService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDepositService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDepositService {
	mock := &MockDepositService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDepositService is an autogenerated mock type for the DepositService type
type MockDepositService struct {
	mock.Mock
}

type MockDepositService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDepositService) EXPECT() *MockDepositService_Expecter {
	return &MockDepositService_Expecter{mock: &_m.Mock}
}

// Deposit provides a mock function for the type MockDepositService
func (_mock *MockDepositService) Deposit(ctx *gin.Context, amount float64, fundId uuid.UUID, customerId uuid.UUID) error {
	ret := _mock.Called(ctx, amount, fundId, customerId)

	if len(ret) == 0 {
		panic("no return value specified for Deposit")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, float64, uuid.UUID, uuid.UUID) error); ok {
		r0 = returnFunc(ctx, amount, fundId, customerId)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockDepositService_Deposit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Deposit'
type MockDepositService_Deposit_Call struct {
	*mock.Call
}

// Deposit is a helper method to define mock.On call
//   - ctx *gin.Context
//   - amount float64
//   - fundId uuid.UUID
//   - customerId uuid.UUID
func (_e *MockDepositService_Expecter) Deposit(ctx interface{}, amount interface{}, fundId interface{}, customerId interface{}) *MockDepositService_Deposit_Call {
	return &MockDepositService_Deposit_Call{Call: _e.mock.On("Deposit", ctx, amount, fundId, customerId)}
}

func (_c *MockDepositService_Deposit_Call) Run(run func(ctx *gin.Context, amount float64, fundId uuid.UUID, customerId uuid.UUID)) *MockDepositService_Deposit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 float64
		if args[1] != nil {
			arg1 = args[1].(float64)
		}
		var arg2 uuid.UUID
		if args[2] != nil {
			arg2 = args[2].(uuid.UUID)
		}
		var arg3 uuid.UUID
		if args[3] != nil {
			arg3 = args[3].(uuid.UUID)
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockDepositService_Deposit_Call) Return(err error) *MockDepositService_Deposit_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockDepositService_Deposit_Call) RunAndReturn(run func(ctx *gin.Context, amount float64, fundId uuid.UUID, customerId uuid.UUID) error) *MockDepositService_Deposit_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockFundService creates a new instance of MockFundService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFundService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFundService {
	mock := &MockFundService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFundService is an autogenerated mock type for the FundService type
type MockFundService struct {
	mock.Mock
}

type MockFundService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFundService) EXPECT() *MockFundService_Expecter {
	return &MockFundService_Expecter{mock: &_m.Mock}
}

// CreateFund provides a mock function for the type MockFundService
func (_mock *MockFundService) CreateFund(ctx *gin.Context, fund *dto.FundInput) (*dto.Fund, error) {
	ret := _mock.Called(ctx, fund)

	if len(ret) == 0 {
		panic("no return value specified for CreateFund")
	}

	var r0 *dto.Fund
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.FundInput) (*dto.Fund, error)); ok {
		return returnFunc(ctx, fund)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.FundInput) *dto.Fund); ok {
		r0 = returnFunc(ctx, fund)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Fund)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *dto.FundInput) error); ok {
		r1 = returnFunc(ctx, fund)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFundService_CreateFund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFund'
type MockFundService_CreateFund_Call struct {
	*mock.Call
}

// CreateFund is a helper method to define mock.On call
//   - ctx *gin.Context
//   - fund *dto.FundInput
func (_e *MockFundService_Expecter) CreateFund(ctx interface{}, fund interface{}) *MockFundService_CreateFund_Call {
	return &MockFundService_CreateFund_Call{Call: _e.mock.On("CreateFund", ctx, fund)}
}

func (_c *MockFundService_CreateFund_Call) Run(run func(ctx *gin.Context, fund *dto.FundInput)) *MockFundService_CreateFund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 *dto.FundInput
		if args[1] != nil {
			arg1 = args[1].(*dto.FundInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFundService_CreateFund_Call) Return(fund1 *dto.Fund, err error) *MockFundService_CreateFund_Call {
	_c.Call.Return(fund1, err)
	return _c
}

func (_c *MockFundService_CreateFund_Call) RunAndReturn(run func(ctx *gin.Context, fund *dto.FundInput) (*dto.Fund, error)) *MockFundService_CreateFund_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunds provides a mock function for the type MockFundService
func (_mock *MockFundService) GetFunds(ctx *gin.Context) ([]*dto.Fund, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFunds")
	}

	var r0 []*dto.Fund
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) ([]*dto.Fund, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) []*dto.Fund); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Fund)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFundService_GetFunds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunds'
type MockFundService_GetFunds_Call struct {
	*mock.Call
}

// GetFunds is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockFundService_Expecter) GetFunds(ctx interface{}) *MockFundService_GetFunds_Call {
	return &MockFundService_GetFunds_Call{Call: _e.mock.On("GetFunds", ctx)}
}

func (_c *MockFundService_GetFunds_Call) Run(run func(ctx *gin.Context)) *MockFundService_GetFunds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFundService_GetFunds_Call) Return(funds []*dto.Fund, err error) *MockFundService_GetFunds_Call {
	_c.Call.Return(funds, err)
	return _c
}

func (_c *MockFundService_GetFunds_Call) RunAndReturn(run func(ctx *gin.Context) ([]*dto.Fund, error)) *MockFundService_GetFunds_Call {
	_c.Call.Return(run)
	return _c
}
