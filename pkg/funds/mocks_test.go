// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package funds

import (
	"cushon/pkg/dto"

	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockFundStore creates a new instance of MockFundStore. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFundStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFundStore {
	mock := &MockFundStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFundStore is an autogenerated mock type for the FundStore type
type MockFundStore struct {
	mock.Mock
}

type MockFundStore_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFundStore) EXPECT() *MockFundStore_Expecter {
	return &MockFundStore_Expecter{mock: &_m.Mock}
}

// CreateFund provides a mock function for the type MockFundStore
func (_mock *MockFundStore) CreateFund(ctx *gin.Context, fund *dto.FundInput) (*dto.Fund, error) {
	ret := _mock.Called(ctx, fund)

	if len(ret) == 0 {
		panic("no return value specified for CreateFund")
	}

	var r0 *dto.Fund
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.FundInput) (*dto.Fund, error)); ok {
		return returnFunc(ctx, fund)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context, *dto.FundInput) *dto.Fund); ok {
		r0 = returnFunc(ctx, fund)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.Fund)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context, *dto.FundInput) error); ok {
		r1 = returnFunc(ctx, fund)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFundStore_CreateFund_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateFund'
type MockFundStore_CreateFund_Call struct {
	*mock.Call
}

// CreateFund is a helper method to define mock.On call
//   - ctx *gin.Context
//   - fund *dto.FundInput
func (_e *MockFundStore_Expecter) CreateFund(ctx interface{}, fund interface{}) *MockFundStore_CreateFund_Call {
	return &MockFundStore_CreateFund_Call{Call: _e.mock.On("CreateFund", ctx, fund)}
}

func (_c *MockFundStore_CreateFund_Call) Run(run func(ctx *gin.Context, fund *dto.FundInput)) *MockFundStore_CreateFund_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		var arg1 *dto.FundInput
		if args[1] != nil {
			arg1 = args[1].(*dto.FundInput)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFundStore_CreateFund_Call) Return(fund1 *dto.Fund, err error) *MockFundStore_CreateFund_Call {
	_c.Call.Return(fund1, err)
	return _c
}

func (_c *MockFundStore_CreateFund_Call) RunAndReturn(run func(ctx *gin.Context, fund *dto.FundInput) (*dto.Fund, error)) *MockFundStore_CreateFund_Call {
	_c.Call.Return(run)
	return _c
}

// GetFunds provides a mock function for the type MockFundStore
func (_mock *MockFundStore) GetFunds(ctx *gin.Context) ([]*dto.Fund, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetFunds")
	}

	var r0 []*dto.Fund
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) ([]*dto.Fund, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(*gin.Context) []*dto.Fund); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*dto.Fund)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(*gin.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockFundStore_GetFunds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFunds'
type MockFundStore_GetFunds_Call struct {
	*mock.Call
}

// GetFunds is a helper method to define mock.On call
//   - ctx *gin.Context
func (_e *MockFundStore_Expecter) GetFunds(ctx interface{}) *MockFundStore_GetFunds_Call {
	return &MockFundStore_GetFunds_Call{Call: _e.mock.On("GetFunds", ctx)}
}

func (_c *MockFundStore_GetFunds_Call) Run(run func(ctx *gin.Context)) *MockFundStore_GetFunds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFundStore_GetFunds_Call) Return(funds []*dto.Fund, err error) *MockFundStore_GetFunds_Call {
	_c.Call.Return(funds, err)
	return _c
}

func (_c *MockFundStore_GetFunds_Call) RunAndReturn(run func(ctx *gin.Context) ([]*dto.Fund, error)) *MockFundStore_GetFunds_Call {
	_c.Call.Return(run)
	return _c
}
